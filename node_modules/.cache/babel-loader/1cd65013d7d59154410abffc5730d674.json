{"ast":null,"code":"import _slicedToArray from \"/home/tchbek/Desktop/object-detection-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\n\nvar useWebcam = function useWebcam(videoRef) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      webcamLoaded = _useState2[0],\n      setWebcamLoaded = _useState2[1];\n\n  useEffect(function () {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices.getUserMedia({\n        audio: false,\n        video: {\n          facingMode: 'user'\n        }\n      }).then(function (stream) {\n        // window.stream = stream\n        videoRef.current.srcObject = stream;\n\n        videoRef.current.onloadedmetadata = function () {\n          setWebcamLoaded(true);\n        };\n      });\n    }\n  }, [videoRef]);\n  return webcamLoaded;\n};\n\nexport default useWebcam;","map":{"version":3,"sources":["/home/tchbek/Desktop/object-detection-react/src/useWebcam.js"],"names":["useEffect","useState","useWebcam","videoRef","webcamLoaded","setWebcamLoaded","navigator","mediaDevices","getUserMedia","audio","video","facingMode","then","stream","current","srcObject","onloadedmetadata"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAC,QAAQ,EAAI;AAAA,kBACYF,QAAQ,CAAC,KAAD,CADpB;AAAA;AAAA,MACrBG,YADqB;AAAA,MACPC,eADO;;AAE5BL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIM,SAAS,CAACC,YAAV,IAA0BD,SAAS,CAACC,YAAV,CAAuBC,YAArD,EAAmE;AACjEF,MAAAA,SAAS,CAACC,YAAV,CACGC,YADH,CACgB;AACZC,QAAAA,KAAK,EAAE,KADK;AAEZC,QAAAA,KAAK,EAAE;AACLC,UAAAA,UAAU,EAAE;AADP;AAFK,OADhB,EAOGC,IAPH,CAOQ,UAAAC,MAAM,EAAI;AACd;AACAV,QAAAA,QAAQ,CAACW,OAAT,CAAiBC,SAAjB,GAA6BF,MAA7B;;AACAV,QAAAA,QAAQ,CAACW,OAAT,CAAiBE,gBAAjB,GAAoC,YAAM;AACxCX,UAAAA,eAAe,CAAC,IAAD,CAAf;AACD,SAFD;AAGD,OAbH;AAcD;AACF,GAjBQ,EAiBN,CAACF,QAAD,CAjBM,CAAT;AAkBA,SAAOC,YAAP;AACD,CArBD;;AAuBA,eAAeF,SAAf","sourcesContent":["import { useEffect, useState } from 'react'\n\nconst useWebcam = videoRef => {\n  const [webcamLoaded, setWebcamLoaded] = useState(false)\n  useEffect(() => {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      navigator.mediaDevices\n        .getUserMedia({\n          audio: false,\n          video: {\n            facingMode: 'user'\n          }\n        })\n        .then(stream => {\n          // window.stream = stream\n          videoRef.current.srcObject = stream\n          videoRef.current.onloadedmetadata = () => {\n            setWebcamLoaded(true)\n          }\n        })\n    }\n  }, [videoRef])\n  return webcamLoaded\n}\n\nexport default useWebcam\n"]},"metadata":{},"sourceType":"module"}