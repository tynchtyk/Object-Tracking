{"ast":null,"code":"import _regeneratorRuntime from \"/home/tchbek/Desktop/object-detection-react/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/tchbek/Desktop/object-detection-react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useEffect } from 'react';\n\nvar renderPredictions = function renderPredictions(predictions, canvasRef) {\n  var ctx = canvasRef.current.getContext('2d');\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Font options.\n\n  var font = '16px sans-serif';\n  ctx.font = font;\n  ctx.textBaseline = 'top';\n  predictions.forEach(function (prediction) {\n    var x = prediction.bbox[0];\n    var y = prediction.bbox[1];\n    var width = prediction.bbox[2];\n    var height = prediction.bbox[3]; // Draw the bounding box.\n\n    ctx.strokeStyle = '#00FFFF';\n    ctx.lineWidth = 4;\n    ctx.strokeRect(x, y, width, height * 2);\n    var blurredRect = {\n      x: x,\n      y: y,\n      height: height,\n      width: width,\n      spread: 10\n    };\n    ctx.filter = 'blur(' + blurredRect.spread + 'px)'; // draw the canvas over itself, cropping to our required rect\n\n    ctx.drawImage(ctx.canvas, blurredRect.x, blurredRect.y, blurredRect.width, blurredRect.height, blurredRect.x, blurredRect.y, blurredRect.width, blurredRect.height); // Draw the label background.\n\n    /*ctx.fillStyle = '#00FFFF'\n    const textWidth = ctx.measureText(prediction.class).width\n    const textHeight = parseInt(font, 10) // base 10\n    ctx.fillRect(x, y, textWidth + 4, textHeight + 4)\n    */\n  });\n  /*\n  predictions.forEach(prediction => {\n    const x = prediction.bbox[0]\n    const y = prediction.bbox[1]\n    // Draw the text last to ensure it's on top.\n    ctx.fillStyle = '#000000'\n    ctx.fillText(prediction.class, x, y)\n  })\n  */\n};\n\nvar detectFrame =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(model, videoRef, canvasRef) {\n    var predictions;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return model.detect(videoRef.current);\n\n          case 2:\n            predictions = _context.sent;\n            renderPredictions(predictions, canvasRef);\n            requestAnimationFrame(function () {\n              detectFrame(model, videoRef, canvasRef);\n            });\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function detectFrame(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar useBoxRenderer = function useBoxRenderer(model, videoRef, canvasRef, shouldRender) {\n  useEffect(function () {\n    if (model && shouldRender) {\n      detectFrame(model, videoRef, canvasRef);\n    }\n  }, [canvasRef, model, shouldRender, videoRef]);\n};\n\nexport default useBoxRenderer;","map":{"version":3,"sources":["/home/tchbek/Desktop/object-detection-react/src/useBoxRenderer.js"],"names":["useEffect","renderPredictions","predictions","canvasRef","ctx","current","getContext","clearRect","canvas","width","height","font","textBaseline","forEach","prediction","x","bbox","y","strokeStyle","lineWidth","strokeRect","blurredRect","spread","filter","drawImage","detectFrame","model","videoRef","detect","requestAnimationFrame","useBoxRenderer","shouldRender"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\n\nconst renderPredictions = (predictions, canvasRef) => {\n  const ctx = canvasRef.current.getContext('2d')\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\n  // Font options.\n  const font = '16px sans-serif'\n  ctx.font = font\n  ctx.textBaseline = 'top'\n  predictions.forEach(prediction => {\n    const x = prediction.bbox[0]\n    const y = prediction.bbox[1]\n    const width = prediction.bbox[2]\n    const height = prediction.bbox[3]\n    // Draw the bounding box.\n    ctx.strokeStyle = '#00FFFF'\n    ctx.lineWidth = 4\n\n   \n    ctx.strokeRect(x, y, width, height*2)\n    var blurredRect = {\n      x: x,\n      y: y,\n      height: height,\n      width: width,\n      spread: 10\n    };\n    ctx.filter = 'blur('+ blurredRect.spread +'px)';\n  // draw the canvas over itself, cropping to our required rect\n  ctx.drawImage(ctx.canvas,\n    blurredRect.x, blurredRect.y, blurredRect.width, blurredRect.height,\n    blurredRect.x, blurredRect.y, blurredRect.width, blurredRect.height\n  );\n  \n    // Draw the label background.\n    /*ctx.fillStyle = '#00FFFF'\n    const textWidth = ctx.measureText(prediction.class).width\n    const textHeight = parseInt(font, 10) // base 10\n    ctx.fillRect(x, y, textWidth + 4, textHeight + 4)\n    */\n  })\n  \n  /*\n  predictions.forEach(prediction => {\n    const x = prediction.bbox[0]\n    const y = prediction.bbox[1]\n    // Draw the text last to ensure it's on top.\n    ctx.fillStyle = '#000000'\n    ctx.fillText(prediction.class, x, y)\n  })\n  */\n}\n\nconst detectFrame = async (model, videoRef, canvasRef) => {\n  const predictions = await model.detect(videoRef.current)\n  renderPredictions(predictions, canvasRef)\n  requestAnimationFrame(() => {\n    detectFrame(model, videoRef, canvasRef)\n  })\n}\n\nconst useBoxRenderer = (model, videoRef, canvasRef, shouldRender) => {\n  useEffect(() => {\n    if (model && shouldRender) {\n      detectFrame(model, videoRef, canvasRef)\n    }\n  }, [canvasRef, model, shouldRender, videoRef])\n}\n\nexport default useBoxRenderer\n"]},"metadata":{},"sourceType":"module"}